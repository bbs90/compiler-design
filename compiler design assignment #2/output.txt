program bin(input, output);
{this is a binary search routine}
type data = array[1..100] of integer;
var a:data; i,index,item:integer;

procedure binsrch(a:data; i,j:integer; var index:integer); 
var mid:
	integer;
begin
if j < i then index:=-1	{search failed}
else begin
       mid:=(i+j) div 2;
       if a[mid] = item then index:=mid 		{found it}
else if a[mid]<item then binsrch(a,mid+1,j,item,index)
       else binsrch(a,i,mid-1,item,index)
     end;
end;

begin
for i := 1 to 100 do a[i] := 2*i+(i mod 2);
for i := 1 to 5 do
	begin
	  read(item);
	  binsrch(a,1,2*i,item,index);
	  writeln(item,index)
	end
end.


LIST OF ALL LEXEMS PRESENT IN INPUT CODE

program
KEYWORD

bin
IDENTIFIER

(
LEFT  PARENTHESIS

input
IDENTIFIER

,
COMMA

output
IDENTIFIER

)
RIGHT  PARENTHESIS

;
SEMICOLON

type
KEYWORD

data
IDENTIFIER

=
EQUAL TO

array
KEYWORD

[
LEFT SQUARE BRACKET

1
CONSTANT

.
PERIOD

.
PERIOD

100
CONSTANT

]
RIGHT SQUARE BRACKET

of
KEYWORD

integer
IDENTIFIER

;
SEMICOLON

var
KEYWORD

a
IDENTIFIER

:
COLON

data
IDENTIFIER

;
SEMICOLON

i
IDENTIFIER

,
COMMA

index
IDENTIFIER

,
COMMA

item
IDENTIFIER

:
COLON

integer
IDENTIFIER

;
SEMICOLON

procedure
KEYWORD

binsrch
IDENTIFIER

(
LEFT  PARENTHESIS

a
IDENTIFIER

:
COLON

data
IDENTIFIER

;
SEMICOLON

i
IDENTIFIER

,
COMMA

j
IDENTIFIER

:
COLON

integer
IDENTIFIER

;
SEMICOLON

var
KEYWORD

index
IDENTIFIER

:
COLON

integer
IDENTIFIER

)
RIGHT  PARENTHESIS

;
SEMICOLON

var
KEYWORD

mid
IDENTIFIER

integer
IDENTIFIER

;
SEMICOLON

begin
KEYWORD

if
KEYWORD

j
IDENTIFIER

<
LESS THAN

i
IDENTIFIER

then
KEYWORD

index
IDENTIFIER

:=
ASSIGNMENT OPERATOR

-
MINUS

1
CONSTANT

else
KEYWORD

begin
KEYWORD

mid
IDENTIFIER

:=
ASSIGNMENT OPERATOR

(
LEFT  PARENTHESIS

i
IDENTIFIER

+
PLUS

j
IDENTIFIER

)
RIGHT  PARENTHESIS

div
KEYWORD

2
CONSTANT

;
SEMICOLON

if
KEYWORD

a
IDENTIFIER

[
LEFT SQUARE BRACKET

mid
IDENTIFIER

]
RIGHT SQUARE BRACKET

=
EQUAL TO

item
IDENTIFIER

then
KEYWORD

index
IDENTIFIER

:=
ASSIGNMENT OPERATOR

mid
IDENTIFIER

else
KEYWORD

if
KEYWORD

a
IDENTIFIER

[
LEFT SQUARE BRACKET

mid
IDENTIFIER

]
RIGHT SQUARE BRACKET

<
LESS THAN

item
IDENTIFIER

then
KEYWORD

binsrch
IDENTIFIER

(
LEFT  PARENTHESIS

a
IDENTIFIER

,
COMMA

mid
IDENTIFIER

+
PLUS

1
CONSTANT

,
COMMA

j
IDENTIFIER

,
COMMA

item
IDENTIFIER

,
COMMA

index
IDENTIFIER

)
RIGHT  PARENTHESIS

else
KEYWORD

binsrch
IDENTIFIER

(
LEFT  PARENTHESIS

a
IDENTIFIER

,
COMMA

i
IDENTIFIER

,
COMMA

mid
IDENTIFIER

-
MINUS

1
CONSTANT

,
COMMA

item
IDENTIFIER

,
COMMA

index
IDENTIFIER

)
RIGHT  PARENTHESIS

end
KEYWORD

;
SEMICOLON

end
KEYWORD

;
SEMICOLON

begin
KEYWORD

for
KEYWORD

i
IDENTIFIER

:=
ASSIGNMENT OPERATOR

1
CONSTANT

to
KEYWORD

100
CONSTANT

do
KEYWORD

a
IDENTIFIER

[
LEFT SQUARE BRACKET

i
IDENTIFIER

]
RIGHT SQUARE BRACKET

:=
ASSIGNMENT OPERATOR

2
CONSTANT

*
STAR

i
IDENTIFIER

+
PLUS

(
LEFT  PARENTHESIS

i
IDENTIFIER

mod
KEYWORD

2
CONSTANT

)
RIGHT  PARENTHESIS

;
SEMICOLON

for
KEYWORD

i
IDENTIFIER

:=
ASSIGNMENT OPERATOR

1
CONSTANT

to
KEYWORD

5
CONSTANT

do
KEYWORD

begin
KEYWORD

read
IDENTIFIER

(
LEFT  PARENTHESIS

item
IDENTIFIER

)
RIGHT  PARENTHESIS

;
SEMICOLON

binsrch
IDENTIFIER

(
LEFT  PARENTHESIS

a
IDENTIFIER

,
COMMA

1
CONSTANT

,
COMMA

2
CONSTANT

*
STAR

i
IDENTIFIER

,
COMMA

item
IDENTIFIER

,
COMMA

index
IDENTIFIER

)
RIGHT  PARENTHESIS

;
SEMICOLON

writeln
IDENTIFIER

(
LEFT  PARENTHESIS

item
IDENTIFIER

,
COMMA

index
IDENTIFIER

)
RIGHT  PARENTHESIS

end
KEYWORD

end
KEYWORD

.
PERIOD



SYMBOL TABLE

bin
IDENTIFER

input
IDENTIFER

output
IDENTIFER

data
IDENTIFER

integer
IDENTIFER

a
IDENTIFER

i
IDENTIFER

index
IDENTIFER

item
IDENTIFER

binsrch
IDENTIFER

j
IDENTIFER

mid
IDENTIFER

read
IDENTIFER

writeln
IDENTIFER

